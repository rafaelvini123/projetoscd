// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2019 21:22:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BancoRegistrador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BancoRegistrador_vlg_sample_tst(
	clk,
	rp_addr,
	rp_rd,
	rq_addr,
	rq_rd,
	w_addr,
	w_data,
	w_wr,
	sampler_tx
);
input  clk;
input [3:0] rp_addr;
input  rp_rd;
input [3:0] rq_addr;
input  rq_rd;
input [3:0] w_addr;
input [15:0] w_data;
input  w_wr;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rp_addr or rp_rd or rq_addr or rq_rd or w_addr or w_data or w_wr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BancoRegistrador_vlg_check_tst (
	rp_data,
	rq_data,
	sampler_rx
);
input [15:0] rp_data;
input [15:0] rq_data;
input sampler_rx;

reg [15:0] rp_data_expected;
reg [15:0] rq_data_expected;

reg [15:0] rp_data_prev;
reg [15:0] rq_data_prev;

reg [15:0] rp_data_expected_prev;
reg [15:0] rq_data_expected_prev;

reg [15:0] last_rp_data_exp;
reg [15:0] last_rq_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	rp_data_prev = rp_data;
	rq_data_prev = rq_data;
end

// update expected /o prevs

always @(trigger)
begin
	rp_data_expected_prev = rp_data_expected;
	rq_data_expected_prev = rq_data_expected;
end


// expected rp_data[ 15 ]
initial
begin
	rp_data_expected[15] = 1'bX;
end 
// expected rp_data[ 14 ]
initial
begin
	rp_data_expected[14] = 1'bX;
end 
// expected rp_data[ 13 ]
initial
begin
	rp_data_expected[13] = 1'bX;
end 
// expected rp_data[ 12 ]
initial
begin
	rp_data_expected[12] = 1'bX;
end 
// expected rp_data[ 11 ]
initial
begin
	rp_data_expected[11] = 1'bX;
end 
// expected rp_data[ 10 ]
initial
begin
	rp_data_expected[10] = 1'bX;
end 
// expected rp_data[ 9 ]
initial
begin
	rp_data_expected[9] = 1'bX;
end 
// expected rp_data[ 8 ]
initial
begin
	rp_data_expected[8] = 1'bX;
end 
// expected rp_data[ 7 ]
initial
begin
	rp_data_expected[7] = 1'bX;
end 
// expected rp_data[ 6 ]
initial
begin
	rp_data_expected[6] = 1'bX;
end 
// expected rp_data[ 5 ]
initial
begin
	rp_data_expected[5] = 1'bX;
end 
// expected rp_data[ 4 ]
initial
begin
	rp_data_expected[4] = 1'bX;
end 
// expected rp_data[ 3 ]
initial
begin
	rp_data_expected[3] = 1'bX;
end 
// expected rp_data[ 2 ]
initial
begin
	rp_data_expected[2] = 1'bX;
end 
// expected rp_data[ 1 ]
initial
begin
	rp_data_expected[1] = 1'bX;
end 
// expected rp_data[ 0 ]
initial
begin
	rp_data_expected[0] = 1'bX;
end 
// expected rq_data[ 15 ]
initial
begin
	rq_data_expected[15] = 1'bX;
end 
// expected rq_data[ 14 ]
initial
begin
	rq_data_expected[14] = 1'bX;
end 
// expected rq_data[ 13 ]
initial
begin
	rq_data_expected[13] = 1'bX;
end 
// expected rq_data[ 12 ]
initial
begin
	rq_data_expected[12] = 1'bX;
end 
// expected rq_data[ 11 ]
initial
begin
	rq_data_expected[11] = 1'bX;
end 
// expected rq_data[ 10 ]
initial
begin
	rq_data_expected[10] = 1'bX;
end 
// expected rq_data[ 9 ]
initial
begin
	rq_data_expected[9] = 1'bX;
end 
// expected rq_data[ 8 ]
initial
begin
	rq_data_expected[8] = 1'bX;
end 
// expected rq_data[ 7 ]
initial
begin
	rq_data_expected[7] = 1'bX;
end 
// expected rq_data[ 6 ]
initial
begin
	rq_data_expected[6] = 1'bX;
end 
// expected rq_data[ 5 ]
initial
begin
	rq_data_expected[5] = 1'bX;
end 
// expected rq_data[ 4 ]
initial
begin
	rq_data_expected[4] = 1'bX;
end 
// expected rq_data[ 3 ]
initial
begin
	rq_data_expected[3] = 1'bX;
end 
// expected rq_data[ 2 ]
initial
begin
	rq_data_expected[2] = 1'bX;
end 
// expected rq_data[ 1 ]
initial
begin
	rq_data_expected[1] = 1'bX;
end 
// expected rq_data[ 0 ]
initial
begin
	rq_data_expected[0] = 1'bX;
end 
// generate trigger
always @(rp_data_expected or rp_data or rq_data_expected or rq_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected rp_data = %b | expected rq_data = %b | ",rp_data_expected_prev,rq_data_expected_prev);
	$display("| real rp_data = %b | real rq_data = %b | ",rp_data_prev,rq_data_prev);
`endif
	if (
		( rp_data_expected_prev[0] !== 1'bx ) && ( rp_data_prev[0] !== rp_data_expected_prev[0] )
		&& ((rp_data_expected_prev[0] !== last_rp_data_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[0] = rp_data_expected_prev[0];
	end
	if (
		( rp_data_expected_prev[1] !== 1'bx ) && ( rp_data_prev[1] !== rp_data_expected_prev[1] )
		&& ((rp_data_expected_prev[1] !== last_rp_data_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[1] = rp_data_expected_prev[1];
	end
	if (
		( rp_data_expected_prev[2] !== 1'bx ) && ( rp_data_prev[2] !== rp_data_expected_prev[2] )
		&& ((rp_data_expected_prev[2] !== last_rp_data_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[2] = rp_data_expected_prev[2];
	end
	if (
		( rp_data_expected_prev[3] !== 1'bx ) && ( rp_data_prev[3] !== rp_data_expected_prev[3] )
		&& ((rp_data_expected_prev[3] !== last_rp_data_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[3] = rp_data_expected_prev[3];
	end
	if (
		( rp_data_expected_prev[4] !== 1'bx ) && ( rp_data_prev[4] !== rp_data_expected_prev[4] )
		&& ((rp_data_expected_prev[4] !== last_rp_data_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[4] = rp_data_expected_prev[4];
	end
	if (
		( rp_data_expected_prev[5] !== 1'bx ) && ( rp_data_prev[5] !== rp_data_expected_prev[5] )
		&& ((rp_data_expected_prev[5] !== last_rp_data_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[5] = rp_data_expected_prev[5];
	end
	if (
		( rp_data_expected_prev[6] !== 1'bx ) && ( rp_data_prev[6] !== rp_data_expected_prev[6] )
		&& ((rp_data_expected_prev[6] !== last_rp_data_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[6] = rp_data_expected_prev[6];
	end
	if (
		( rp_data_expected_prev[7] !== 1'bx ) && ( rp_data_prev[7] !== rp_data_expected_prev[7] )
		&& ((rp_data_expected_prev[7] !== last_rp_data_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[7] = rp_data_expected_prev[7];
	end
	if (
		( rp_data_expected_prev[8] !== 1'bx ) && ( rp_data_prev[8] !== rp_data_expected_prev[8] )
		&& ((rp_data_expected_prev[8] !== last_rp_data_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[8] = rp_data_expected_prev[8];
	end
	if (
		( rp_data_expected_prev[9] !== 1'bx ) && ( rp_data_prev[9] !== rp_data_expected_prev[9] )
		&& ((rp_data_expected_prev[9] !== last_rp_data_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[9] = rp_data_expected_prev[9];
	end
	if (
		( rp_data_expected_prev[10] !== 1'bx ) && ( rp_data_prev[10] !== rp_data_expected_prev[10] )
		&& ((rp_data_expected_prev[10] !== last_rp_data_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[10] = rp_data_expected_prev[10];
	end
	if (
		( rp_data_expected_prev[11] !== 1'bx ) && ( rp_data_prev[11] !== rp_data_expected_prev[11] )
		&& ((rp_data_expected_prev[11] !== last_rp_data_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[11] = rp_data_expected_prev[11];
	end
	if (
		( rp_data_expected_prev[12] !== 1'bx ) && ( rp_data_prev[12] !== rp_data_expected_prev[12] )
		&& ((rp_data_expected_prev[12] !== last_rp_data_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[12] = rp_data_expected_prev[12];
	end
	if (
		( rp_data_expected_prev[13] !== 1'bx ) && ( rp_data_prev[13] !== rp_data_expected_prev[13] )
		&& ((rp_data_expected_prev[13] !== last_rp_data_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[13] = rp_data_expected_prev[13];
	end
	if (
		( rp_data_expected_prev[14] !== 1'bx ) && ( rp_data_prev[14] !== rp_data_expected_prev[14] )
		&& ((rp_data_expected_prev[14] !== last_rp_data_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[14] = rp_data_expected_prev[14];
	end
	if (
		( rp_data_expected_prev[15] !== 1'bx ) && ( rp_data_prev[15] !== rp_data_expected_prev[15] )
		&& ((rp_data_expected_prev[15] !== last_rp_data_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rp_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rp_data_expected_prev);
		$display ("     Real value = %b", rp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rp_data_exp[15] = rp_data_expected_prev[15];
	end
	if (
		( rq_data_expected_prev[0] !== 1'bx ) && ( rq_data_prev[0] !== rq_data_expected_prev[0] )
		&& ((rq_data_expected_prev[0] !== last_rq_data_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[0] = rq_data_expected_prev[0];
	end
	if (
		( rq_data_expected_prev[1] !== 1'bx ) && ( rq_data_prev[1] !== rq_data_expected_prev[1] )
		&& ((rq_data_expected_prev[1] !== last_rq_data_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[1] = rq_data_expected_prev[1];
	end
	if (
		( rq_data_expected_prev[2] !== 1'bx ) && ( rq_data_prev[2] !== rq_data_expected_prev[2] )
		&& ((rq_data_expected_prev[2] !== last_rq_data_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[2] = rq_data_expected_prev[2];
	end
	if (
		( rq_data_expected_prev[3] !== 1'bx ) && ( rq_data_prev[3] !== rq_data_expected_prev[3] )
		&& ((rq_data_expected_prev[3] !== last_rq_data_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[3] = rq_data_expected_prev[3];
	end
	if (
		( rq_data_expected_prev[4] !== 1'bx ) && ( rq_data_prev[4] !== rq_data_expected_prev[4] )
		&& ((rq_data_expected_prev[4] !== last_rq_data_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[4] = rq_data_expected_prev[4];
	end
	if (
		( rq_data_expected_prev[5] !== 1'bx ) && ( rq_data_prev[5] !== rq_data_expected_prev[5] )
		&& ((rq_data_expected_prev[5] !== last_rq_data_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[5] = rq_data_expected_prev[5];
	end
	if (
		( rq_data_expected_prev[6] !== 1'bx ) && ( rq_data_prev[6] !== rq_data_expected_prev[6] )
		&& ((rq_data_expected_prev[6] !== last_rq_data_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[6] = rq_data_expected_prev[6];
	end
	if (
		( rq_data_expected_prev[7] !== 1'bx ) && ( rq_data_prev[7] !== rq_data_expected_prev[7] )
		&& ((rq_data_expected_prev[7] !== last_rq_data_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[7] = rq_data_expected_prev[7];
	end
	if (
		( rq_data_expected_prev[8] !== 1'bx ) && ( rq_data_prev[8] !== rq_data_expected_prev[8] )
		&& ((rq_data_expected_prev[8] !== last_rq_data_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[8] = rq_data_expected_prev[8];
	end
	if (
		( rq_data_expected_prev[9] !== 1'bx ) && ( rq_data_prev[9] !== rq_data_expected_prev[9] )
		&& ((rq_data_expected_prev[9] !== last_rq_data_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[9] = rq_data_expected_prev[9];
	end
	if (
		( rq_data_expected_prev[10] !== 1'bx ) && ( rq_data_prev[10] !== rq_data_expected_prev[10] )
		&& ((rq_data_expected_prev[10] !== last_rq_data_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[10] = rq_data_expected_prev[10];
	end
	if (
		( rq_data_expected_prev[11] !== 1'bx ) && ( rq_data_prev[11] !== rq_data_expected_prev[11] )
		&& ((rq_data_expected_prev[11] !== last_rq_data_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[11] = rq_data_expected_prev[11];
	end
	if (
		( rq_data_expected_prev[12] !== 1'bx ) && ( rq_data_prev[12] !== rq_data_expected_prev[12] )
		&& ((rq_data_expected_prev[12] !== last_rq_data_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[12] = rq_data_expected_prev[12];
	end
	if (
		( rq_data_expected_prev[13] !== 1'bx ) && ( rq_data_prev[13] !== rq_data_expected_prev[13] )
		&& ((rq_data_expected_prev[13] !== last_rq_data_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[13] = rq_data_expected_prev[13];
	end
	if (
		( rq_data_expected_prev[14] !== 1'bx ) && ( rq_data_prev[14] !== rq_data_expected_prev[14] )
		&& ((rq_data_expected_prev[14] !== last_rq_data_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[14] = rq_data_expected_prev[14];
	end
	if (
		( rq_data_expected_prev[15] !== 1'bx ) && ( rq_data_prev[15] !== rq_data_expected_prev[15] )
		&& ((rq_data_expected_prev[15] !== last_rq_data_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rq_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rq_data_expected_prev);
		$display ("     Real value = %b", rq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rq_data_exp[15] = rq_data_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BancoRegistrador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] rp_addr;
reg rp_rd;
reg [3:0] rq_addr;
reg rq_rd;
reg [3:0] w_addr;
reg [15:0] w_data;
reg w_wr;
// wires                                               
wire [15:0] rp_data;
wire [15:0] rq_data;

wire sampler;                             

// assign statements (if any)                          
BancoRegistrador i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.rp_addr(rp_addr),
	.rp_data(rp_data),
	.rp_rd(rp_rd),
	.rq_addr(rq_addr),
	.rq_data(rq_data),
	.rq_rd(rq_rd),
	.w_addr(w_addr),
	.w_data(w_data),
	.w_wr(w_wr)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// rp_addr[ 3 ]
initial
begin
	rp_addr[3] = 1'b0;
	rp_addr[3] = #220000 1'b1;
	rp_addr[3] = #50000 1'b0;
end 
// rp_addr[ 2 ]
initial
begin
	rp_addr[2] = 1'b0;
end 
// rp_addr[ 1 ]
initial
begin
	rp_addr[1] = 1'b0;
	rp_addr[1] = #220000 1'b1;
	rp_addr[1] = #50000 1'b0;
end 
// rp_addr[ 0 ]
initial
begin
	rp_addr[0] = 1'b0;
end 

// rp_rd
initial
begin
	rp_rd = 1'b0;
	rp_rd = #220000 1'b1;
	rp_rd = #50000 1'b0;
end 
// rq_addr[ 3 ]
initial
begin
	rq_addr[3] = 1'b0;
end 
// rq_addr[ 2 ]
initial
begin
	rq_addr[2] = 1'b0;
	rq_addr[2] = #220000 1'b1;
	rq_addr[2] = #50000 1'b0;
end 
// rq_addr[ 1 ]
initial
begin
	rq_addr[1] = 1'b0;
	rq_addr[1] = #220000 1'b1;
	rq_addr[1] = #50000 1'b0;
end 
// rq_addr[ 0 ]
initial
begin
	rq_addr[0] = 1'b0;
	rq_addr[0] = #220000 1'b1;
	rq_addr[0] = #50000 1'b0;
end 

// rq_rd
initial
begin
	rq_rd = 1'b0;
	rq_rd = #220000 1'b1;
	rq_rd = #50000 1'b0;
end 
// w_addr[ 3 ]
initial
begin
	w_addr[3] = 1'b1;
	w_addr[3] = #60000 1'b0;
end 
// w_addr[ 2 ]
initial
begin
	w_addr[2] = 1'b0;
	w_addr[2] = #60000 1'b1;
	w_addr[2] = #60000 1'b0;
end 
// w_addr[ 1 ]
initial
begin
	w_addr[1] = 1'b1;
	w_addr[1] = #120000 1'b0;
end 
// w_addr[ 0 ]
initial
begin
	w_addr[0] = 1'b0;
	w_addr[0] = #60000 1'b1;
	w_addr[0] = #60000 1'b0;
end 
// w_data[ 15 ]
initial
begin
	w_data[15] = 1'b1;
	w_data[15] = #60000 1'b0;
end 
// w_data[ 14 ]
initial
begin
	w_data[14] = 1'b1;
	w_data[14] = #60000 1'b0;
end 
// w_data[ 13 ]
initial
begin
	w_data[13] = 1'b1;
	w_data[13] = #60000 1'b0;
end 
// w_data[ 12 ]
initial
begin
	w_data[12] = 1'b1;
	w_data[12] = #130000 1'b0;
end 
// w_data[ 11 ]
initial
begin
	w_data[11] = 1'b1;
	w_data[11] = #130000 1'b0;
end 
// w_data[ 10 ]
initial
begin
	w_data[10] = 1'b0;
	w_data[10] = #60000 1'b1;
	w_data[10] = #70000 1'b0;
end 
// w_data[ 9 ]
initial
begin
	w_data[9] = 1'b0;
end 
// w_data[ 8 ]
initial
begin
	w_data[8] = 1'b0;
end 
// w_data[ 7 ]
initial
begin
	w_data[7] = 1'b0;
end 
// w_data[ 6 ]
initial
begin
	w_data[6] = 1'b0;
end 
// w_data[ 5 ]
initial
begin
	w_data[5] = 1'b0;
end 
// w_data[ 4 ]
initial
begin
	w_data[4] = 1'b0;
	w_data[4] = #60000 1'b1;
	w_data[4] = #70000 1'b0;
end 
// w_data[ 3 ]
initial
begin
	w_data[3] = 1'b0;
	w_data[3] = #60000 1'b1;
	w_data[3] = #70000 1'b0;
end 
// w_data[ 2 ]
initial
begin
	w_data[2] = 1'b0;
	w_data[2] = #60000 1'b1;
	w_data[2] = #70000 1'b0;
end 
// w_data[ 1 ]
initial
begin
	w_data[1] = 1'b0;
	w_data[1] = #60000 1'b1;
	w_data[1] = #70000 1'b0;
end 
// w_data[ 0 ]
initial
begin
	w_data[0] = 1'b0;
	w_data[0] = #60000 1'b1;
	w_data[0] = #70000 1'b0;
end 

// w_wr
initial
begin
	w_wr = 1'b1;
	w_wr = #40000 1'b0;
	w_wr = #20000 1'b1;
	w_wr = #40000 1'b0;
end 

BancoRegistrador_vlg_sample_tst tb_sample (
	.clk(clk),
	.rp_addr(rp_addr),
	.rp_rd(rp_rd),
	.rq_addr(rq_addr),
	.rq_rd(rq_rd),
	.w_addr(w_addr),
	.w_data(w_data),
	.w_wr(w_wr),
	.sampler_tx(sampler)
);

BancoRegistrador_vlg_check_tst tb_out(
	.rp_data(rp_data),
	.rq_data(rq_data),
	.sampler_rx(sampler)
);
endmodule

